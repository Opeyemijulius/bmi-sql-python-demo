# -*- coding: utf-8 -*-
"""patient_bmi_calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uJ5MNexGxwrFU1lsYKs_TCE2HoCjubKk

**Project Goal**: Write a Python function to calculate BMI from patient height and weight, then apply it to a list of patients from a mock relational database and to additionally categorize the BMI (underweight, normal, overweight, obese). It also has a script to update the data with a new patient info and this can be automated for larger patient datasets.

BMI is a number used to estimate a personâ€™s body fat based on their weight and height. Itâ€™s widely used in healthcare to screen for weight categories that may lead to health problems.

ðŸ§® How to Calculate BMI

Take the person's weight in kilograms (kg)

Take the personâ€™s height in centimeters (cm)

Convert the height from cm to meters

Since 1 meter = 100 cm, divide the height by 100

Square the height in meters

Divide the weight by the squared height

BMI = (weight in kg) / (height in m)^2  = a number or ratio with no units

Below code uses SQL (sqlite3 for RAM access, Python, and Pandas)
"""

import pandas as pd
import sqlite3

# creates a new SQLite database connection
# The special string ":memory:" tells SQLite to create the database in RAM (memory) instead of on disk.
conn = sqlite3.connect (":memory:")

# creates a cursor object from the connection.
# execute SQL commands through the cursor.
cursor = conn.cursor()

# Create the Table in the relational (structured rows & cols) Database
cursor.execute (
    """
    CREATE TABLE bmi_records (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      firstName TEXT,
      lastName TEXT,
      weight_kg REAL,
      height_m REAL,
      bmi REAL
    )
    """
)

patients = {
    ("Ada", "Nguyen", 68.0, 1.65),
    ("Liam", "Johnson", 82.0, 1.75),
    ("Zoe", "Smith", 54.0, 1.60),
    ("Noah", "Lee", 95.0, 1.80),
    ("Maya", "Patel", 72.0, 1.70),
    ("Ethan", "Kim", 61.0, 1.68),
    ("Ava", "Brown", 48.5, 1.55),
    ("Oliver", "Garcia", 102.3, 1.90),
    ("Sophia", "Martinez", 63.0, 1.66),
    ("Jackson", "Chen", 76.2, 1.73)
}

for firstName, lastName, weight_kg, height_m in patients:
    bmi = weight_kg / (height_m ** 2) # assume appropriate units
    cursor.execute(
        """
        INSERT INTO bmi_records (firstName, lastName, weight_kg, height_m, bmi)
        VALUES (?, ?, ?, ?, ?)
        """,
    (firstName, lastName, weight_kg, height_m, bmi))

df = pd.read_sql_query("SELECT * FROM bmi_records", conn)
print(df)

# Insert Destiny Julius
first_name_insert = "Destiny"
last_name_insert = "Julius"
weight_kg = 55.8
height_m = 1.64
bmi = weight_kg / (height_m ** 2)

cursor.execute(
    """
    INSERT INTO bmi_records (firstName, lastName, weight_kg, height_m, bmi)
    VALUES (?, ?, ?, ?, ?)
    """,
    (first_name_insert, last_name_insert, weight_kg, height_m, bmi)
)
conn.commit()

# Delete Destiny Ijeoma
first_name_delete = "Destiny"
last_name_delete = "Ijeoma"

cursor.execute(
    """
    DELETE FROM bmi_records
    WHERE firstName = ? AND lastName = ?
    """,
    (first_name_delete, last_name_delete)
)
conn.commit()

# Verify by reading the table
df = pd.read_sql_query("SELECT * FROM bmi_records", conn)
print(df)

def print_bmi_report (firstname, lastname, bmi_value, bmi_category):
    """
    Prints a formatted BMI report for a given person.
    """
    print(f"{firstname, lastname} has a BMI of {bmi_value:.2f}, which falls in the {bmi_category} category.")

def calculate_bmi(weight_kg, height_m):
    return weight_kg / (height_m ** 2)

def categorize_bmi(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 25:
        return "Normal"
    elif 25 <= bmi < 30:
        return "Overweight"
    else:
        return "Obese"

# The 11th patient to be added to the database

w = 55.7919 # my weight
h = 1.64 # my height
destiny_bmi = calculate_bmi (w, h)
destiny_category = categorize_bmi(destiny_bmi)
print_bmi_report("Destiny", "Julius", destiny_bmi, destiny_category)